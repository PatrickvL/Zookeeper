// Automatically generated by hypercallgen.py
#include "Zookeeper.hpp"

uint32_t hypercall_dispatch(uint32_t call, uint32_t addr) {
	switch(call) {
		case 0: { // map_aligned
			auto sarg = box->cpu->read_memory<hypercall_map_aligned_t>(addr);
			return box->hypercall->map_aligned(sarg.virt_base, sarg.count);
			break;
		}
		case 1: { // map
			auto sarg = box->cpu->read_memory<hypercall_map_t>(addr);
			return box->hypercall->map(sarg.virt_base, sarg.count);
			break;
		}
		case 2: { // query_eeprom
			return box->hypercall->query_eeprom(addr);
			break;
		}
		case 3: { // unmap
			auto sarg = box->cpu->read_memory<hypercall_unmap_t>(addr);
			box->hypercall->unmap(sarg.virt_base, sarg.count);
			break;
		}
		case 4: { // log_
			box->hypercall->log_(addr);
			break;
		}
		case 5: { // create_thread
			auto sarg = box->cpu->read_memory<hypercall_create_thread_t>(addr);
			return box->hypercall->create_thread(sarg.eip, sarg.esp, sarg.arg);
			break;
		}
		case 6: { // get_xbebase
			return box->hypercall->get_xbebase();
			break;
		}
	}
	return 0;
}

